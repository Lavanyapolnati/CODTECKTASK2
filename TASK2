import java.util.*;

public class LibraryManagementSystem {

    static class Book {
        private String id;
        private String title;
        private String author;
        private boolean isAvailable;

        public Book(String id, String title, String author) {
            this.id = id;
            this.title = title;
            this.author = author;
            this.isAvailable = true;
        }

        public String getId() {
            return id;
        }

        public String getTitle() {
            return title;
        }

        public String getAuthor() {
            return author;
        }

        public boolean isAvailable() {
            return isAvailable;
        }

        public void setAvailable(boolean available) {
            isAvailable = available;
        }

        @Override
        public String toString() {
            return String.format("ID: %s, Title: %s, Author: %s, Available: %s",
                    id, title, author, isAvailable ? "Yes" : "No");
        }
    }

    static class Borrower {
        private String id;
        private String name;

        public Borrower(String id, String name) {
            this.id = id;
            this.name = name;
        }

        public String getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return String.format("ID: %s, Name: %s", id, name);
        }
    }

    static class Library {
        private Map<String, Book> books;
        private Map<String, Borrower> borrowers;
        private Map<String, String> borrowedBooks; 

        public Library() {
            books = new HashMap<>();
            borrowers = new HashMap<>();
            borrowedBooks = new HashMap<>();
        }

        public void addBook(Book book) {
            books.put(book.getId(), book);
        }

        public void addBorrower(Borrower borrower) {
            borrowers.put(borrower.getId(), borrower);
        }

        public void borrowBook(String bookId, String borrowerId) {
            Book book = books.get(bookId);
            Borrower borrower = borrowers.get(borrowerId);

            if (book == null) {
                System.out.println("Book not found.");
            } else if (borrower == null) {
                System.out.println("Borrower not found.");
            } else if (!book.isAvailable()) {
                System.out.println("Book is already borrowed.");
            } else {
                book.setAvailable(false);
                borrowedBooks.put(bookId, borrowerId);
                System.out.println("Book borrowed successfully.");
            }
        }

        public void returnBook(String bookId) {
            Book book = books.get(bookId);
            if (book == null) {
                System.out.println("Book not found.");
            } else if (book.isAvailable()) {
                System.out.println("Book is not borrowed.");
            } else {
                book.setAvailable(true);
                borrowedBooks.remove(bookId);
                System.out.println("Book returned successfully.");
            }
        }

        public void listBooks() {
            if (books.isEmpty()) {
                System.out.println("No books available.");
            } else {
                for (Book book : books.values()) {
                    System.out.println(book);
                }
            }
        }

        public void viewBorrowedBooks() {
            if (borrowedBooks.isEmpty()) {
                System.out.println("No books are currently borrowed.");
            } else {
                for (Map.Entry<String, String> entry : borrowedBooks.entrySet()) {
                    Book book = books.get(entry.getKey());
                    Borrower borrower = borrowers.get(entry.getValue());
                    System.out.println(String.format("Book: %s, Borrower: %s",
                            book.getTitle(), borrower.getName()));
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Library library = new Library();

        // Adding some default books and borrowers
        library.addBook(new Book("1", "1984", "George Orwell"));
        library.addBook(new Book("2", "To Kill a Mockingbird", "Harper Lee"));
        library.addBook(new Book("3", "The Great Gatsby", "F. Scott Fitzgerald"));
        library.addBorrower(new Borrower("1", "Alice"));
        library.addBorrower(new Borrower("2", "Bob"));

        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Add Book");
            System.out.println("2. List Books");
            System.out.println("3. Borrow Book");
            System.out.println("4. Return Book");
            System.out.println("5. View Borrowed Books");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter Book ID: ");
                    String id = scanner.nextLine();
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    library.addBook(new Book(id, title, author));
                    System.out.println("Book added successfully.");
                    break;

                case 2:
                    library.listBooks();
                    break;

                case 3:
                    System.out.print("Enter Book ID to Borrow: ");
                    String borrowBookId = scanner.nextLine();
                    System.out.print("Enter Borrower ID: ");
                    String borrowerId = scanner.nextLine();
                    library.borrowBook(borrowBookId, borrowerId);
                    break;

                case 4:
                    System.out.print("Enter Book ID to Return: ");
                    String returnBookId = scanner.nextLine();
                    library.returnBook(returnBookId);
                    break;

                case 5:
                    library.viewBorrowedBooks();
                    break;

                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
